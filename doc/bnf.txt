Program             := Function | GlobalDeclaration
GlobalDeclaration   := Type identifier {"=" ConstantExpr}?
Type                := PrimitiveType | PointerType
PrimitiveType       := void | char | short | int | long | float | double | signed | unsigned
PointerType         := PrimitiveType "*"
ConstantExpr        := int32|uint32|int64|uint64|float|double|string
Function            := Type identifier "(" FuncArg? ")" "{" Stmt* "}"
FuncArg             := Type identifier {"," Type identifier}*
Stmt                := {Expr}? ";"
                    := IfStmt
                    := WhileStmt
                    := DoWhileStmt
                    := ForStmt
                    := ForDeclarationStmt
                    := Declaration
                    := BlockStmt
                    := ReturnStmt
                    := BreakStmt
                    := ContinueStmt
IfStmt              := if "(" Expr ")" Stmt {else Stmt}?
WhileStmt           := while "(" Expr ")" Stmt
DoWhileStmt         := do Stmt while "(" Expr ")" ";"
ForStmt             := for "(" {Expr}? ";" {Expr}? ";" {Expr}? ")" Stmt
ForDeclarationStmt  := for "(" Declaration {Expr}? ";" {Expr}? ")" Stmt
Declaration         := Type identifier {"=" Expr}? ";"
BlockStmt           := "{" Stmt* "}"
ReturnStmt          := return {Expr}? ";"
BreakStmt           := break ";"
ContinueStmt        := continue ";"
Expr                := AssignExpr {"," AssignExpr}*
AssignExpr          := ConditionalExpr
                    := UnaryExpr AssignOp AssignExpr
AssignOp            := "=" | "+=" | "/=" | "*=" | "-=" | "%=" | "<<=" | ">>="
                    := "&=" | "|=" | "^="
ConditionalExpr     := LogOrExpr {"?" Expr ":" ConditionalExpr}?
LogOrExpr           := LogAndExpr {"||" LogAndExpr}*
LogAndExpr          := InclusiveOrExpr {"&&" InclusiveOrExpr}*
InclusiveOrExpr     := ExclusiveOrExpr {"|" ExclusiveOrExpr}*
ExclusiveOrExpr     := AndExpr {"^" AndExpr}*
AndExpr             := EqualExpr {"&" EqualExpr}*
EqualExpr           := RelationalExpr {"==" || "!=" RelationalExpr}*
RelationalExpr      := ShiftExpr {"<"|">"|"<="|">=" ShiftExpr}*
ShiftExpr           := AdditiveExpr {"<<"|">>" AdditiveExpr}*
AdditiveExpr        := MultiExpr {"+"|"-" MultiExpr}*
MultiExpr           := CastExpr {"*"|"/"|"%" CastExpr}*
CastExpr            := UnaryExpr | "("Type")" CastExpr
UnaryExpr           := PostFixExpr
                    := "++" UnaryExpr
                    := "--" UnaryExpr
                    := UnaryOp CastExpr
                    := sizeof UnaryExpr
                    := sizeof "(" Type ")"
UnaryOp             := "&" | "*" | "+" | "-" | "~" | "!"
PostFixExpr         := PrimaryExpr {"["Expr"] | "(" ArgumentExprList ")" | "." identifier | "->" identifier | "++" | --}*
                    := "(" Type ")" "{" initializer-list "}"
                    := "(" Type ")" "{" initializer-list, "}"
ArgumentExprList    := AssignExpr {"," AssignExpr}*
PrimaryExpr         := identifier
                    := constant
                    := string-literal
                    := "(" Expr ")"




